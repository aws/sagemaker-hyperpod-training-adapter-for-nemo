name: Python License Scan CI

on:
  pull_request:
    branches:
      - main # Change to the branch we want to target for PRs

permissions:
   id-token: write # This is required for requesting the JWT
   contents: read # This is required for actions/checkout

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.RUNNER_ROLE_ARN }}
          role-session-name: unit-test-runner-pull-session
          aws-region: us-west-2

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_URI }}

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 22 # Set node version to 22

      - name: Git clone repolinter, get ruleset and run repolinter
        run: |
          cd ..
          git clone https://github.com/todogroup/repolinter.git
          cd repolinter
          npm install
          aws s3 cp --recursive ${{ secrets.REPOLINTER_S3LINK }} ./repolinter-ruleset
          node ./bin/repolinter.js lint ${{ github.workspace }} -r ./repolinter-ruleset/amazon-ospo-ruleset.json > ${{ github.workspace }}/scanOutput.txt
          cd ${{ github.workspace }}
          chmod +x ./scripts/licenseChecker.sh
          ./scripts/licenseChecker.sh source_code

      - name: Download approved licenses from S3
        run: |
          aws s3 cp ${{ secrets.LICENSES_S3LINK }} ./ApprovedLicenses.txt

      - name: Review available disk space before cache cleanup
        run: |
          df -h

      - name: Clean docker cache
        run: |
          docker system prune -a --volumes -f
          docker image prune -a -f

      - name: Clean apt cache
        run: |
          sudo apt-get clean
          sudo apt-get autoremove

      - name : Clean hosted tool cache
        run: |
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /opt/hostedtoolcache/go
          sudo rm -rf /opt/hostedtoolcache/microsoft

      - name : Clean android user cache
        run: |
          sudo rm -rf /usr/local/lib/android

      - name: Review available disk space after cache cleanup
        run: |
          df -h

      - name: Pull docker image
        run: docker pull ${{ secrets.ECR_REPO_URI }}:${{ secrets.ECR_IMAGE_TAG }}

      - name: Install dependencies and run license scanner
        run: |
          # FIXME: it looks like /bin/bash interpret pip incorectly. Add a
          # dummy command `:` before running pip.
          docker run -t --rm \
            -v "${PWD}:/workspace" \
            -w "/workspace" \
            -e "TRAINING_JOB_ARN=SM_DUMMY_ARN" \
            "${{ secrets.ECR_REPO_URI }}:${{ secrets.ECR_IMAGE_TAG }}" \
            /bin/bash -c ': && wget https://www.python.org/ftp/python/3.11.0/Python-3.11.0.tgz \
            && tar -xzf Python-3.11.0.tgz \
            && cd Python-3.11.0 \
            && ./configure --enable-optimizations \
            && make altinstall && cd .. \
            && /usr/local/bin/python3.11 -m venv .venv \
            && source .venv/bin/activate \
            && pip install --upgrade pip setuptools \
            && pip install --force-reinstall --no-deps -r requirements/requirements.txt -r requirements/requirements_lightning.txt -r requirements/requirements_nemo.txt \
            && pip install --force-reinstall --no-deps . && pip install -r requirements/requirements_test.txt -r requirements/requirements_profiling.txt \
            && pip install pip-licenses \
            && pip-licenses --with-description --order=license --format=json> LicenseArtifact.txt \
            && chmod +x ./scripts/licenseChecker.sh \
            && ./scripts/licenseChecker.sh installed_packages\
           '

      - name: Upload license files as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: LicenseArtifact
          path: |
            LicenseArtifact.txt
          retention-days: 5
